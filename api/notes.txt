https://rest-apis-flask.teclado.com/

python3 -m venv venv

source venv/bin/activate

deactivate

cmd + shift + P -> Python: Select Interpreter -> .//venv/bin/python3

pip install flask python-dotenv flask-smorest sqlalchemy flask-sqlalchemy flask-marshmallow marshmallow-sqlalchemy flask-jwt-extended flask-migrate requests jinja2

touch __init__.py config.py run.py .flaskenv Dockerfile

Install Docker Desktop application

https://blog.logrocket.com/build-deploy-flask-app-using-docker/

https://rest-apis-flask.teclado.com/docs/flask_smorest/reload_api_docker_container/#running-the-container-with-volumes-for-hot-reloading

https://stackoverflow.com/a/63819488

pip freeze > requirements.txt

^ Need to run after new pip installations

Docker image needs to be rebuilt after new pip installation packages are added to requirements.txt

docker build -t udemy-flask-api .

docker run -dp 5000:5000 -w /api -v "$(pwd):/api" udemy-flask-api

docker ps

docker restart <CONTAINER ID>

docker restart 1c55c8b8a389


https://github.com/tecladocode/rest-apis-flask-python

https://www.udemy.com/course/rest-api-flask-and-python/learn/lecture/33781440#overview


flask db_create

flask db_drop

flask db_seed


cat api/.flaskenv
FLASK_APP=run.py
FLASK_DEBUG=1
JWT_SECRET_KEY=<JWT_SECRET_KEY>


touch .gitignore


JWT

https://rest-apis-flask.teclado.com/docs/flask_jwt_extended/what_is_a_jwt/

https://jwt.io/introduction



JWT Secret Generator
https://docs.python.org/3/library/secrets.html

python

>>> import secrets

>>> secrets.SystemRandom().getrandbits(128)
98401826142759308826507999794775708831


Token refreshing with Flask-JWT-Extended
https://rest-apis-flask.teclado.com/docs/flask_jwt_extended/token_refreshing_flask_jwt_extended/



Database migrations with Alembic and Flask-Migrate
https://rest-apis-flask.teclado.com/docs/flask_migrate/why_use_database_migrations/

https://rest-apis-flask.teclado.com/docs/flask_migrate/change_models_generate_alembic_migration/

flask db migrate -m "Updated item table schema"

flask db upgrade




Sending Emails with Mailgun
https://www.udemy.com/course/rest-api-flask-and-python/learn/lecture/34471166

Dashboard -> Sending -> API -> Python

Add mailgun API key and mailgun domain values to .flaskenv

Add test email address to Authorized Recipients


Sending HTML emails with Mailgun
https://rest-apis-flask.teclado.com/docs/task_queues_emails/sending_html_emails/

Mailgun email templates
https://github.com/mailgun/transactional-email-templates






Image Upload


yarn add react-dropzone

https://codesandbox.io/s/react-dropzone-upload-gi4bd

https://www.youtube.com/watch?v=hO85tWDctIk&ab_channel=MoodyCodes

https://github.com/moodyomar/youtube-files/blob/master/drag-drop-react/src/App.js

https://stackoverflow.com/questions/56025690/how-to-remove-file-from-react-dropzone

https://blog.miguelgrinberg.com/post/handling-file-uploads-with-flask/page/0#comments

https://www.twilio.com/blog/media-file-storage-python-flask-amazon-s3-buckets


pip install boto3 awscli

AWS' SDK for Python, known as Boto3, provides high-level access to AWS services such as S3.

The awscli package is used to gain access to Amazon Web Services from the command line.



cd api

‚ùØ aws configure
AWS Access Key ID [None]: ##########################
AWS Secret Access Key [None]: ###################################
Default region name [None]: us-east-2
Default output format [None]: 


